# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
#from buildbot.plugins import schedulers as bbs
import copy
import os.path
import datetime
import random

from build import Build
from reports import Reports
from markdown import Markdown
from packages import Packages
from ansible import Ansible
from docker_images import Docker
from maintenance import Maintenance

c = BuildmasterConfig = {}

#The branches you want to configure builders for
branches = {
{% for branch in opencast %}
  '{{ branch }}': {
    'branch': '{{ opencast[branch]["branch"] }}',
{% if "ffmpeg" in opencast[branch] %}
    'ffmpeg': '{{ opencast[branch]["ffmpeg"] }}',
{% elif "develop" == opencast[branch]["branch"] %}
    'ffmpeg': '{{ opencast[branch]["pom"] | int - 1 }}',
{% else %}
    'ffmpeg': '{{ opencast[branch]["pom"] }}',
{% endif %}
    'profiles': {{ opencast[branch]["profiles"] | default([]) }},
    'el': {{ opencast[branch]["el"] | default([]) }},
    'pom': '{{ opencast[branch]["pom"] }}',
    'server': '{{ opencast[branch]["server"] | default(None) }}',
    'jdk': {{ opencast[branch]["jdk"] }},
    'cores': '{{ opencast[branch]["cores"] | default("1C") }}'
  },
{% endfor %}
}
#
####### WORKERS

workerProps = {
{% for worker in groups['workers'] %}
  '{{ hostvars[worker]["name"] }}': {
{% if not worker in groups['master'] %}
    'port': '{{ (hostvars[worker]['id'] + 2375) }}',
{% else %}
    'port': '2375',
{% endif %}
    'max_jobs': '{{ hostvars[worker]['max_jobs'] | default(hostvars[worker]["ansible_processor_count"]) }}',
    'deb_repo_fragment': '{{ hostvars[worker]["deb_repo_fragment"] | default(deb_repo_fragment) }}',
    'rpm_repo_fragment': '{{ hostvars[worker]["rpm_repo_fragment"] | default(rpm_repo_fragment) }}',
    'repo_builder': '{{ hostvars[worker]["repo_builder"] | default(False) }}',
    'builder_uid': {{ hostvars[worker]["uid"] }},
    'builder_gid': {{ hostvars[worker]['gid'] }},
    'docker_gid': {{ hostvars[worker]['docker_gid'] }},
    'write_through': {{ hostvars[worker]['write_through'] | default(False) }}
  },
{% endfor %}
}

@util.renderer
def getSharedVolumes(props):
  shared_volumes = [
    '{{ buildbot_home }}/m2:/builder/m2',
    '{{ buildbot_home }}/ansible:/builder/.ansible',
    '{{ buildbot_config_worker }}:{{ buildbot_config }}:ro'
  ]
  if workerProps[props.getProperty('workername')]['write_through']:
    shared_volumes.append('{{ buildbot_home }}/builds:/builds')
  if props.hasProperty('docker_image') or "docker cleanup" in props.getProperty('buildername'):
    shared_volumes.append('/var/run/docker.sock:/var/run/docker.sock')
  return shared_volumes

#FIXME: Once https://github.com/docker/docker-py/issues/2230 is resolved, try moving
#os.environ["DOCKER_BUILDKIT"] = "1"
# into the block below, then
#COPY <<EOF /builder/.ssh/config
#{ { lookup('template', '{{ role_path }}/templates/embeds/ssh_config') } }
#EOF
#will work and we can do away with the escapes and templating
dockerfile = """
FROM {{ docker_image_user }}/ocqa-%(prop:image)s-worker-base:{{ docker_worker_image_tag }}

#Remove any existing group that matches the docker gid, then create the docker group and bb user
RUN dgroup=`grep %(prop:docker_gid)s /etc/group | cut -f 1 -d ":"` && \
    if [ -z "$dgroup" ]; then groupadd -g %(prop:docker_gid)s docker && dgroup="docker"; fi && \
    groupadd -g %(prop:builder_gid)s buildbot && \
    useradd -m -u %(prop:builder_uid)s -g %(prop:builder_gid)s -G $dgroup -s /bin/bash -d /builder buildbot && \
    mkdir -p /builder/.ssh /builds && \
    chown -R buildbot:buildbot /builder /builds

SHELL ["/bin/bash", "-c"]
RUN echo -e "{{ lookup('template', '{{ role_path }}/temp/ssh_config') }}" > /builder/.ssh/config && \
    echo -e "{{ lookup('template', '{{ role_path }}/temp/known_hosts') }}" > /builder/.ssh/known_hosts && \
    chown -R buildbot:buildbot /builder/.ssh && \
    chmod -R 600 /builder/.ssh/*

USER buildbot

WORKDIR /builder

CMD ["/usr/local/bin/dumb-init", "twistd", "--pidfile=", "-ny", "buildbot.tac"]
"""

@util.renderer
def getHostConfig(props):
#Host mode needed to use the ssh-forwarded tunnel
  hostconfig={
    "network_mode": "host",
    "devices": ["/dev/fuse"],
    "cap_add": ["SYS_ADMIN"],
    "privileged": False
  }
  if props.hasProperty('buildername') and "ocqa worker build" == props.getProperty('buildername'):
    worker = props.getProperty('workername')
    hostconfig["group_add"] = [ workerProps[worker]['docker_gid'] ]
  return hostconfig

def selectBaseImage(props):
  docker_images = {{ docker_worker_images }}

  #Pick one at random, set it as a build property
  if not props.hasProperty('image'):
    osname = random.choice(docker_images)
    props.setProperty('image', osname, "Build")
  else:
    osname = props.getProperty('image')
  return osname


#At pipeline runtime, picks the docker image to use
@util.renderer
def selectDockerName(props):
  osname = selectBaseImage(props)

  #Build the actual name to use
  return "ocqa-" + osname + "-worker:{{ docker_worker_image_tag }}"

@util.renderer
def selectDockerfile(props):
  osname = selectBaseImage(props)

  #Build the actual name to use
  #return f"{{ buildbot_config }}/workers/{ osname }/Dockerfile"
  return util.Interpolate(dockerfile)

#Generates the workers based on the contents of workerProps
def generateWorkers():
  workers = []
  for w in workerProps.keys():
    myProps = workerProps[w]

    #Setting password=None here causes the latent worker to autogenerate a random password and transmit it via env variables!
    latentWorker = worker.DockerLatentWorker(w, password=None,
                docker_host='tcp://localhost:' + myProps['port'],
                #image=selectDockerName,
                dockerfile=selectDockerfile,
                volumes=getSharedVolumes,
                properties=myProps,
                autopull=True,
                masterFQDN="localhost:9989",
                hostconfig=getHostConfig,
                followStartupLogs=True,
                custom_context=False,
#               So this sounds good in theory, but in practice the job dispatching doesn't quite catch that
#                a worker is spun up using a specific distro, and dispatches inappropriate jobs to the worker (c.f: rpm builds to a deb)
#                locks=[util.MasterLock(w).access('exclusive')]) -> max_builds=w['max_jobs'])
                locks=[util.MasterLock(w).access('exclusive')])
    workers.append(latentWorker)
  return workers


# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = generateWorkers()

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

{% if enable_polling %}
repo = changes.GitPoller(repourl="{{ source_repo_url }}",
                              branches=True,
                              pollinterval={{ poll_interval }},
                              buildPushesWithNoCommits=True)

pull_requests = changes.GitHubPullrequestPoller(
                              owner="{{ source_pr_owner }}",
                              repo="{{ source_pr_slug }}",
                              pollAtLaunch=True,
                              pollInterval={{ poll_interval }},
                              repository_type="git",
                              token="{{ github_token }}",
                              magic_link=True)

c['change_source'] = [ repo, pull_requests ]
{% else %}
#We're using a webhook, so other change sources are not needed
c['change_source'] = []
{% endif %}

####### BUILDERS & SCHEDULERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []

generalBuilderNames=[]
allNames=[]

for pretty_branch_name in branches:
    props = {
        'git_branch_name': branches[pretty_branch_name]['branch'],
        'pkg_major_version': branches[pretty_branch_name]['pom'],
        'pkg_minor_version': "x",
        'repo_component': "unstable",
        'branch_pretty': pretty_branch_name,
        'signing_key': '{{ signing_key_id }}',
        'package_all': {{ package_all }},
        'deploy_env': branches[pretty_branch_name]['server'],
        'jdk': branches[pretty_branch_name]['jdk'],
        'cores': branches[pretty_branch_name]['cores'],
        'ffmpeg': branches[pretty_branch_name]['ffmpeg'],
        'workernames': [ name for name in workerProps ],
        'profiles': branches[pretty_branch_name]['profiles'],
        'el': branches[pretty_branch_name]['el'],
    }
    goals = [
        Build,
        Reports,
        Markdown,
        Packages,
        Ansible,
        #Release, FIXME
    ]
    branch_schedulers = {}
    triggering_schedulers = ["Build", "Packages"]
    for goal in goals:
        g = goal(props)
        c['builders'].extend(g.getBuilders())
        branch_schedulers = branch_schedulers | g.getSchedulers()
        for trigger in triggering_schedulers:
            targetKey = f"{ props['branch_pretty'] }{ trigger }"
            if targetKey in branch_schedulers:
                props[trigger] = branch_schedulers[targetKey]
    c['schedulers'].extend(branch_schedulers.values())

for goal in [Docker, Maintenance]:
    g = goal(props)
    c['builders'].extend(g.getBuilders())
    c['schedulers'].extend(g.getSchedulers().values())

    #These are used for the mail notifiers below
    #generalBuilderNames.extend(
    #    [ pretty_branch_name + " " + build_type + " JDK " + str(jdk)
    #        for build_type in [ 'Build', 'Reports' ]
    #        for jdk in common.getJDKBuilds(props)])
    #allNames = list(generalBuilderNames)
    #for build_type in (" Markdown"): #, " Database Tests"):
    #  generalBuilderNames.append(pretty_branch_name + build_type)
    #  allNames.append(pretty_branch_name + build_type)
#    for build_type in (" Debian Packaging", " Debian Repository", " el7 RPM Packaging", " el8 RPM Packaging", " RPM Repository"):
    #for build_type in (" Debian Packaging", " el7 RPM Packaging", " el8 RPM Packaging", " RPM Repository"):
    #  allNames.append(pretty_branch_name + build_type)
    #if 'server' in branches[pretty_branch_name]:
    #  allNames.append(" Ansible Deploy")


####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

{% raw %}
template=u'''\
<h4>Build status: {{ summary }}</h4>
{% for step in build['steps'] %}
<p> {{ step['name'] }}: {{ step['results'] }}</p>
{% endfor %}
<p> Build link <a href="{{ build_url }}">here</a>
<p><b> -- The Buildbot</b></p>
'''
{% endraw %}

generalStatus = reporters.BuildStatusGenerator(
    mode=('failing', 'change', 'problem', 'warnings'),
    builders=generalBuilderNames,
    message_formatter=reporters.MessageFormatter(template=template,
                                                 template_type='html',
                                                 wantProperties=True,
                                                 wantSteps=True))
errorStatus = reporters.BuildStatusGenerator(
    mode=('exception'),
    builders=allNames,
    message_formatter=reporters.MessageFormatter(template=template,
                                                 template_type='html',
                                                 wantProperties=True,
                                                 wantSteps=True))

c['services'] = []
{% if send_mail_notifications %}
c['services'].append(reporters.MailNotifier(fromaddr="buildbot@opencast.org",
                            sendToInterestedUsers=False,
                            extraRecipients=["{{ mail_to }}"],
                            relayhost="localhost", smtpPort=25,
                            generators=[generalStatus]))

c['services'].append(reporters.MailNotifier(fromaddr="buildbot@opencast.org",
                            sendToInterestedUsers=False,
                            extraRecipients=["{{ mail_to }}"],
                            relayhost="localhost", smtpPort=25,
                            generators=[errorStatus]))
{% endif %}

{% if send_gh_notifications %}
c['services'].append(reporters.GitHubStatusPush(token="{{ github_token | default() }}"))
{% endif %}

{% if send_gl_notifications | default(false) %}
c['services'].append(reporters.GitLabStatusPush(baseURL="{{ gitlab_url | default() }}",
                                context=util.Interpolate("%(prop:buildername)s"),
                                token="{{ gitlab_token | default() }}"))
{% endif %}


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Opencast"
c['titleURL'] = "https://github.com/opencast/opencast"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://{{ inventory_hostname }}/{{buildbot_url}}"

from twisted.cred import strcred
# minimalistic config to activate new web UI
c['www'] = dict(port={{ buildbot_port }},
                default_page="grid",
                plugins=dict(
                    waterfall_view=True,
                    console_view=False,
                    grid_view=True,
                    badges={
                        "left_text": "Build",  # text on the left part of the image
                        "left_color": "#555",  # color of the left part of the image
                        "style": "plastic",  # style of the template availables are "flat", "flat-square", "plastic"
                        "template_name": "{style}.svg.j2",  # name of the template
                        "font_face": "DejaVu Sans",
                        "font_size": 11,
                        "color_scheme": {  # color to be used for right part of the image
                            "exception": "#007ec6",  # blue
                            "failure": "#e05d44",    # red
                            "retry": "#007ec6",      # blue
                            "running": "#007ec6",    # blue
                            "skipped": "a4a61d",     # yellowgreen
                            "passing": "#4c1",       # brightgreen
                            "unknown": "#9f9f9f",    # lightgrey
                            "warnings": "#dfb317"    # yellow
                        }
                    }
                ),
{% if enable_auth %}
                auth=util.GitHubAuth("{{ github_client_id }}", "{{ github_client_secret }}", apiVersion=4, getTeamsMembership=True),
                authz=util.Authz(
                        allowRules=[
                            util.AnyControlEndpointMatcher(role="Committers")
                        ],
                        roleMatchers=[
                            util.RolesFromGroups(groupPrefix='opencast/')
                        ]
                      ),
{% endif %}
                change_hook_auth=[strcred.makeChecker("file:changehook.passwd")],
                change_hook_dialects={
                  'github': {
                    'secret': "{{ github_hook_secret }}",
                    'strict': True,
                  }
                })

c['logCompressionMethod'] = 'gz'
#Don't set the settings below - they lead to log truncation
#c['logMaxSize'] = 1024*1024 # 1M
#c['logMaxTailSize'] = 32768
c['logEncoding'] = 'utf-8'
#Turn off usage data collection
c['buildbotNetUsageData'] = None
{% if debug_enabled %}
from buildbot import manhole
c['manhole'] = manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd", ssh_hostkey_dir="{{ buildbot_config }}/ssh_host_keys/")
{% endif %}

#The path below is relative to the internal root of the master's docker image.  Do not change this.
c['secretsProviders'] = [secrets.SecretInAFile(dirname="/buildbot/secrets")]

#Clean up the database - note that this does *not* clean up the filesystem!
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=datetime.timedelta(weeks=4),
    hour=0
)]

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
